{"ast":null,"code":"import _regeneratorRuntime from \"D:/IT/moje_projekty/to-do_list/node_modules/@babel/runtime/regenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"D:/IT/moje_projekty/to-do_list/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"D:\\\\IT\\\\moje_projekty\\\\to-do_list\\\\pages\\\\[taskId]\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport TaskDetails from '../../components/task/TaskDetails';\n\nvar TaskDetail = function TaskDetail(props) {\n  _s();\n\n  var router = useRouter();\n\n  function updatedTaskHandler(_x) {\n    return _updatedTaskHandler.apply(this, arguments);\n  }\n\n  function _updatedTaskHandler() {\n    _updatedTaskHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(enteredTaskData) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/api/new-task', {\n                method: 'PUT',\n                body: JSON.stringify(enteredTaskData),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context.sent;\n              console.log(data);\n              router.push('/');\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _updatedTaskHandler.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container-details\",\n    children: /*#__PURE__*/_jsxDEV(TaskDetails, {\n      title: props.taskData.title,\n      priority: props.taskData.priority,\n      start_date: props.taskData.start_date,\n      complete: props.taskData.complete,\n      description: props.taskData.description,\n      updatedFunction: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TaskDetail, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", true);\n\n_c = TaskDetail;\nexport var __N_SSG = true;\nexport default TaskDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDetail\");","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/pages/[taskId]/index.js"],"names":["TaskDetails","TaskDetail","props","router","useRouter","updatedTaskHandler","enteredTaskData","fetch","method","body","JSON","stringify","headers","response","json","data","console","log","push","taskData","title","priority","start_date","complete","description"],"mappings":";;;;;;;;AAAA,OAAOA,WAAP,MAAwB,mCAAxB;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAAA;;AAE1B,MAAMC,MAAM,GAAGC,SAAS,EAAxB;;AAF0B,WAIXC,kBAJW;AAAA;AAAA;;AAAA;AAAA,mFAI1B,iBAAkCC,eAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC0BC,KAAK,CAAC,eAAD,EAAkB;AACzCC,gBAAAA,MAAM,EAAE,KADiC;AAEzCC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,eAAf,CAFmC;AAGzCM,gBAAAA,OAAO,EAAE;AACL,kCAAgB;AADX;AAHgC,eAAlB,CAD/B;;AAAA;AACSC,cAAAA,QADT;AAAA;AAAA,qBASuBA,QAAQ,CAACC,IAAT,EATvB;;AAAA;AASUC,cAAAA,IATV;AAUIC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEAZ,cAAAA,MAAM,CAACe,IAAP,CAAY,GAAZ;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJ0B;AAAA;AAAA;;AAmB1B,sBACI;AAAS,IAAA,SAAS,EAAC,mBAAnB;AAAA,2BACI,QAAC,WAAD;AACA,MAAA,KAAK,EAAEhB,KAAK,CAACiB,QAAN,CAAeC,KADtB;AAEA,MAAA,QAAQ,EAAElB,KAAK,CAACiB,QAAN,CAAeE,QAFzB;AAGA,MAAA,UAAU,EAAEnB,KAAK,CAACiB,QAAN,CAAeG,UAH3B;AAIA,MAAA,QAAQ,EAAEpB,KAAK,CAACiB,QAAN,CAAeI,QAJzB;AAKA,MAAA,WAAW,EAAErB,KAAK,CAACiB,QAAN,CAAeK,WAL5B;AAMA,MAAA,eAAe;AANf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAaH,CAhCD;;GAAMvB,U;;KAAAA,U;;AAsFN,eAAeA,UAAf","sourcesContent":["import TaskDetails from '../../components/task/TaskDetails';\r\nimport { MongoClient, ObjectId } from 'mongodb';\r\n\r\nconst TaskDetail = (props) => {\r\n\r\n    const router = useRouter();\r\n\r\n    async function updatedTaskHandler(enteredTaskData) {\r\n       const response = await fetch('/api/new-task', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(enteredTaskData),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(data);\r\n    \r\n        router.push('/')\r\n    }\r\n\r\n    return(\r\n        <section className='container-details'>\r\n            <TaskDetails\r\n            title={props.taskData.title}\r\n            priority={props.taskData.priority}\r\n            start_date={props.taskData.start_date}\r\n            complete={props.taskData.complete}\r\n            description={props.taskData.description}\r\n            updatedFunction\r\n        />\r\n        </section>\r\n        \r\n    );\r\n}\r\n\r\n\r\nexport async function getStaticPaths(){\r\n    const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n\r\n    const tasksCollection = db.collection('tasks');\r\n    const tasks = await tasksCollection.find({}, {_id: 1}).toArray();\r\n\r\n    client.close();\r\n\r\n\r\n    return{\r\n        fallback: 'blocking',\r\n        paths: tasks.map((task) => ({\r\n            params: {\r\n                taskId: task._id.toString()\r\n            },\r\n        }))\r\n    \r\n    };\r\n}\r\n\r\n\r\nexport async function getStaticProps(context) {\r\n\r\n    const taskId = context.params.taskId;\r\n\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n\r\n    const tasksCollection = db.collection('tasks');\r\n    const selectedTask = await tasksCollection.findOne({_id: ObjectId(taskId),});\r\n\r\n    client.close();\r\n\r\n\r\n    return {\r\n        props: {\r\n            taskData: {\r\n                id: selectedTask._id.toString(),\r\n                title: selectedTask.title,\r\n                priority: selectedTask.priority,\r\n                start_date: selectedTask.start_date || null,\r\n                complete: selectedTask.complete || null,\r\n                description: selectedTask.description,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default TaskDetail;"]},"metadata":{},"sourceType":"module"}