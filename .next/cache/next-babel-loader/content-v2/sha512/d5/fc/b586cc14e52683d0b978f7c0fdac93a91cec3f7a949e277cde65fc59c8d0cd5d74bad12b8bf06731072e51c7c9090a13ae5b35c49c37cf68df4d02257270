{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\IT\\\\moje_projekty\\\\to-do_list\\\\pages\\\\[taskId]\\\\index.js\";\nimport TaskDetails from \"../../components/task/TaskDetails\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { useRouter } from \"next/router\";\nimport React, { Fragment } from \"react\";\n\nconst TaskDetail = props => {\n  const router = useRouter();\n\n  async function updatedTaskHandler(enteredTaskData) {\n    const response = await fetch(\"/api/helper\", {\n      method: \"PUT\",\n      body: JSON.stringify(enteredTaskData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    router.push(\"/\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TaskDetails, {\n      title: props.taskData.title,\n      priority: props.taskData.priority,\n      start_date: props.taskData.start_date,\n      complete: props.taskData.complete,\n      description: props.taskData.description,\n      onUpdatedTask: updatedTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  let client;\n\n  try {\n    client = await MongoClient.connect(\"mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority\");\n  } catch (error) {\n    res.status(500).json({\n      message: \"Could not connect to database\"\n    });\n    return;\n  }\n\n  const db = client.db();\n  const tasksCollection = db.collection(\"tasks\");\n  const tasks = await tasksCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: \"blocking\",\n    paths: tasks.map(task => ({\n      params: {\n        taskId: task._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const taskId = context.params.taskId;\n  const client = await MongoClient.connect(\"mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority\");\n  const db = client.db();\n  const tasksCollection = db.collection(\"tasks\");\n  const selectedTask = await tasksCollection.findOne({\n    _id: ObjectId(taskId)\n  });\n  client.close();\n  return {\n    props: {\n      taskData: {\n        id: selectedTask._id.toString(),\n        title: selectedTask.title,\n        priority: selectedTask.priority,\n        start_date: selectedTask.start_date,\n        complete: selectedTask.complete,\n        description: selectedTask.description\n      }\n    }\n  };\n}\nexport default TaskDetail;","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/pages/[taskId]/index.js"],"names":["TaskDetails","MongoClient","ObjectId","useRouter","React","Fragment","TaskDetail","props","router","updatedTaskHandler","enteredTaskData","response","fetch","method","body","JSON","stringify","headers","push","taskData","title","priority","start_date","complete","description","getStaticPaths","client","connect","error","res","status","json","message","db","tasksCollection","collection","tasks","find","_id","toArray","close","fallback","paths","map","task","params","taskId","toString","getStaticProps","context","selectedTask","findOne","id"],"mappings":"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","sourcesContent":["import TaskDetails from \"../../components/task/TaskDetails\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { Fragment } from \"react\";\r\n\r\nconst TaskDetail = (props) => {\r\n  const router = useRouter();\r\n\r\n  async function updatedTaskHandler(enteredTaskData) {\r\n    const response = await fetch(\"/api/helper\", {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(enteredTaskData),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    router.push(\"/\");\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <TaskDetails\r\n        title={props.taskData.title}\r\n        priority={props.taskData.priority}\r\n        start_date={props.taskData.start_date}\r\n        complete={props.taskData.complete}\r\n        description={props.taskData.description}\r\n        onUpdatedTask={updatedTaskHandler}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  let client;\r\n\r\n  try {\r\n    client = await MongoClient.connect(\r\n      \"mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority\"\r\n    );\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Could not connect to database\" });\r\n    return;\r\n  }\r\n\r\n  const db = client.db();\r\n\r\n  const tasksCollection = db.collection(\"tasks\");\r\n  const tasks = await tasksCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: \"blocking\",\r\n    paths: tasks.map((task) => ({\r\n      params: {\r\n        taskId: task._id.toString(),\r\n      },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const taskId = context.params.taskId;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const tasksCollection = db.collection(\"tasks\");\r\n  const selectedTask = await tasksCollection.findOne({ _id: ObjectId(taskId) });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      taskData: {\r\n        id: selectedTask._id.toString(),\r\n        title: selectedTask.title,\r\n        priority: selectedTask.priority,\r\n        start_date: selectedTask.start_date,\r\n        complete: selectedTask.complete,\r\n        description: selectedTask.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default TaskDetail;\r\n"]},"metadata":{},"sourceType":"module"}