{"ast":null,"code":"import _regeneratorRuntime from \"D:/IT/moje_projekty/to-do_list/node_modules/@babel/runtime/regenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"D:/IT/moje_projekty/to-do_list/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"D:\\\\IT\\\\moje_projekty\\\\to-do_list\\\\pages\\\\calendar.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport AllTask from '../components/task/AllTask';\nimport { MongoClient } from 'mongodb';\n\nfunction MyCalendar(props) {\n  _s();\n\n  var router = useRouter();\n\n  function addTaskHandler(_x) {\n    return _addTaskHandler.apply(this, arguments);\n  }\n\n  function _addTaskHandler() {\n    _addTaskHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(enteredTaskData) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/api/new-task', {\n                method: 'POST',\n                body: JSON.stringify(enteredTaskData),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context.sent;\n              console.log(data);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _addTaskHandler.apply(this, arguments);\n  }\n\n  var _useState = useState(new Date()),\n      chosenDate = _useState[0],\n      setChosenDate = _useState[1];\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      value: chosenDate,\n      onChange: setChosenDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AllTask, {\n      tasks: props.tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n/*\r\n//zamina na getServerSideProps\r\nexport async function getServerSideProps(context) {\r\n    \r\n\r\n    const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n  \r\n    const taskCollection = db.collection('tasks');\r\n    const tasks = await taskCollection.find({start_date: chosenDate}).toArray();\r\n  \r\n    client.close()\r\n  \r\n    return {\r\n      props: {\r\n        tasks: tasks.map((task) => ({\r\n          title: task.title,\r\n          priority: task.priority,\r\n          start_date: task.start_date || null,\r\n          complete: task.complete || null,\r\n          id: task._id.toString(),\r\n        })),\r\n      }, \r\n      revalidate: 1\r\n    }\r\n  \r\n  }\r\n\r\n*/\n\n\n_s(MyCalendar, \"w6RnKdIlTbnJCcJFYYGSGESueSE=\", true);\n\n_c = MyCalendar;\nexport default MyCalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyCalendar\");","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/pages/calendar.js"],"names":["Fragment","useState","useEffect","Calendar","AllTask","MongoClient","MyCalendar","props","router","useRouter","addTaskHandler","enteredTaskData","fetch","method","body","JSON","stringify","headers","response","json","data","console","log","Date","chosenDate","setChosenDate","tasks"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,kCAAP;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAAQC,WAAR,QAA0B,SAA1B;;AAGA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AAAA;;AAExB,MAAMC,MAAM,GAAGC,SAAS,EAAxB;;AAFwB,WAIPC,cAJO;AAAA;AAAA;;AAAA;AAAA,+EAItB,iBAA8BC,eAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC0BC,KAAK,CAAC,eAAD,EAAkB;AACzCC,gBAAAA,MAAM,EAAE,MADiC;AAEzCC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,eAAf,CAFmC;AAGzCM,gBAAAA,OAAO,EAAE;AACL,kCAAgB;AADX;AAHgC,eAAlB,CAD/B;;AAAA;AACSC,cAAAA,QADT;AAAA;AAAA,qBASuBA,QAAQ,CAACC,IAAT,EATvB;;AAAA;AASUC,cAAAA,IATV;AAUIC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJsB;AAAA;AAAA;;AAAA,kBAkBenB,QAAQ,CAAC,IAAIsB,IAAJ,EAAD,CAlBvB;AAAA,MAkBdC,UAlBc;AAAA,MAkBFC,aAlBE;;AAoBtB,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAED,UAAjB;AAA6B,MAAA,QAAQ,EAAEC;AAAvC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAElB,KAAK,CAACmB;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAxDSpB,U;;KAAAA,U;AAyDT,eAAeA,UAAf","sourcesContent":["import { Fragment, useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport AllTask from '../components/task/AllTask';\r\nimport {MongoClient} from 'mongodb'\r\n\r\n\r\nfunction MyCalendar(props){\r\n\r\n  const router = useRouter();\r\n\r\n    async function addTaskHandler(enteredTaskData) {\r\n       const response = await fetch('/api/new-task', {\r\n            method: 'POST',\r\n            body: JSON.stringify(enteredTaskData),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(data);\r\n    \r\n    }\r\n\r\n     const [chosenDate, setChosenDate] = useState(new Date());\r\n\r\n    return (\r\n        <Fragment>\r\n            <Calendar value={chosenDate} onChange={setChosenDate}/>\r\n            <AllTask tasks={props.tasks}/>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n/*\r\n//zamina na getServerSideProps\r\nexport async function getServerSideProps(context) {\r\n    \r\n\r\n    const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n  \r\n    const taskCollection = db.collection('tasks');\r\n    const tasks = await taskCollection.find({start_date: chosenDate}).toArray();\r\n  \r\n    client.close()\r\n  \r\n    return {\r\n      props: {\r\n        tasks: tasks.map((task) => ({\r\n          title: task.title,\r\n          priority: task.priority,\r\n          start_date: task.start_date || null,\r\n          complete: task.complete || null,\r\n          id: task._id.toString(),\r\n        })),\r\n      }, \r\n      revalidate: 1\r\n    }\r\n  \r\n  }\r\n\r\n*/\r\nexport default MyCalendar;"]},"metadata":{},"sourceType":"module"}