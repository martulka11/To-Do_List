{"ast":null,"code":"const Database = () => {\n  async function getStaticProps(findTasks) {\n    const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\n    const db = client.db();\n    const taskCollection = db.collection('tasks');\n    const tasks = await taskCollection.find(findTasks).toArray();\n    client.close();\n    return {\n      props: {\n        tasks: tasks.map(task => ({\n          title: task.title,\n          priority: task.priority,\n          start_date: task.start_date || null,\n          complete: task.complete || null,\n          id: task._id.toString()\n        }))\n      },\n      revalidate: 1\n    };\n  }\n};","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/components/Database.js"],"names":["Database","getStaticProps","findTasks","client","MongoClient","connect","db","taskCollection","collection","tasks","find","toArray","close","props","map","task","title","priority","start_date","complete","id","_id","toString","revalidate"],"mappings":"AACA,MAAMA,QAAQ,GAAG,MAAM;AAEvB,iBAAeC,cAAf,CAA8BC,SAA9B,EAAyC;AAErC,UAAMC,MAAM,GAAG,MAAMC,WAAW,CAACC,OAAZ,CAAoB,8FAApB,CAArB;AACA,UAAMC,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX;AAEA,UAAMC,cAAc,GAAGD,EAAE,CAACE,UAAH,CAAc,OAAd,CAAvB;AAEA,UAAMC,KAAK,GAAG,MAAMF,cAAc,CAACG,IAAf,CAAoBR,SAApB,EAA+BS,OAA/B,EAApB;AAEAR,IAAAA,MAAM,CAACS,KAAP;AAEA,WAAO;AACLC,MAAAA,KAAK,EAAE;AACLJ,QAAAA,KAAK,EAAEA,KAAK,CAACK,GAAN,CAAWC,IAAD,KAAW;AAC1BC,UAAAA,KAAK,EAAED,IAAI,CAACC,KADc;AAE1BC,UAAAA,QAAQ,EAAEF,IAAI,CAACE,QAFW;AAG1BC,UAAAA,UAAU,EAAEH,IAAI,CAACG,UAAL,IAAmB,IAHL;AAI1BC,UAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAAL,IAAiB,IAJD;AAK1BC,UAAAA,EAAE,EAAEL,IAAI,CAACM,GAAL,CAASC,QAAT;AALsB,SAAX,CAAV;AADF,OADF;AAULC,MAAAA,UAAU,EAAE;AAVP,KAAP;AAaD;AACF,CA3BD","sourcesContent":["\r\nconst Database = () => {\r\n\r\nasync function getStaticProps(findTasks) {\r\n    \r\n    const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n  \r\n    const taskCollection = db.collection('tasks');\r\n\r\n    const tasks = await taskCollection.find(findTasks).toArray();\r\n  \r\n    client.close()\r\n  \r\n    return {\r\n      props: {\r\n        tasks: tasks.map((task) => ({\r\n          title: task.title,\r\n          priority: task.priority,\r\n          start_date: task.start_date || null,\r\n          complete: task.complete || null,\r\n          id: task._id.toString(),\r\n        })),\r\n      }, \r\n      revalidate: 1\r\n    }\r\n  \r\n  }\r\n}"]},"metadata":{},"sourceType":"script"}