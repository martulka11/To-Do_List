{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\IT\\\\moje_projekty\\\\to-do_list\\\\pages\\\\calendar.js\";\nimport { Fragment, useState } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport AllTask from '../components/task/AllTask';\nimport { MongoClient } from 'mongodb';\n\nfunction MyCalendar(props) {\n  const {\n    0: chosenDate,\n    1: setChosenDate\n  } = useState(new Date());\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      value: chosenDate,\n      onChange: setChosenDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AllTask, {\n      tasks: props.tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\n  const db = client.db();\n  const tasksCollection = db.collection('tasks');\n  const tasks = await tasksCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: 'blocking',\n    paths: tasks.map(task => ({\n      params: {\n        taskId: task._id.toString()\n      }\n    }))\n  };\n} //zamina na getServerSideProps\n\nexport async function getStaticProps(context) {\n  const taskDate = context.chosenDate;\n  const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\n  const db = client.db();\n  const taskCollection = db.collection('tasks');\n  const tasks = await taskCollection.find({\n    start_date: taskDate\n  }).toArray();\n  client.close();\n  return {\n    props: {\n      tasks: tasks.map(task => ({\n        title: task.title,\n        priority: task.priority,\n        start_date: task.start_date || null,\n        complete: task.complete || null,\n        id: task._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n}\nexport default MyCalendar;","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/pages/calendar.js"],"names":["Fragment","useState","Calendar","AllTask","MongoClient","MyCalendar","props","chosenDate","setChosenDate","Date","tasks","getStaticPaths","client","connect","db","tasksCollection","collection","find","_id","toArray","close","fallback","paths","map","task","params","taskId","toString","getStaticProps","context","taskDate","taskCollection","start_date","title","priority","complete","id","revalidate"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,OAAnC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,kCAAP;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAAQC,WAAR,QAA0B,SAA1B;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AACrB,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BP,QAAQ,CAAC,IAAIQ,IAAJ,EAAD,CAA5C;AAED,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEF,UAAjB;AAA6B,MAAA,QAAQ,EAAEC;AAAvC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEF,KAAK,CAACI;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;AAGD,OAAO,eAAeC,cAAf,GAA+B;AAEpC,QAAMC,MAAM,GAAG,MAAMR,WAAW,CAACS,OAAZ,CAAoB,8FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,eAAe,GAAGD,EAAE,CAACE,UAAH,CAAc,OAAd,CAAxB;AACA,QAAMN,KAAK,GAAG,MAAMK,eAAe,CAACE,IAAhB,CAAqB,EAArB,EAAyB;AAACC,IAAAA,GAAG,EAAE;AAAN,GAAzB,EAAmCC,OAAnC,EAApB;AAEAP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAM;AACFC,IAAAA,QAAQ,EAAE,UADR;AAEFC,IAAAA,KAAK,EAAEZ,KAAK,CAACa,GAAN,CAAWC,IAAD,KAAW;AACxBC,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAEF,IAAI,CAACN,GAAL,CAASS,QAAT;AADJ;AADgB,KAAX,CAAV;AAFL,GAAN;AASD,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAE5C,QAAMC,QAAQ,GAAGD,OAAO,CAACtB,UAAzB;AAEE,QAAMK,MAAM,GAAG,MAAMR,WAAW,CAACS,OAAZ,CAAoB,8FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMiB,cAAc,GAAGjB,EAAE,CAACE,UAAH,CAAc,OAAd,CAAvB;AACA,QAAMN,KAAK,GAAG,MAAMqB,cAAc,CAACd,IAAf,CAAoB;AAACe,IAAAA,UAAU,EAAEF;AAAb,GAApB,EAA4CX,OAA5C,EAApB;AAEAP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLd,IAAAA,KAAK,EAAE;AACLI,MAAAA,KAAK,EAAEA,KAAK,CAACa,GAAN,CAAWC,IAAD,KAAW;AAC1BS,QAAAA,KAAK,EAAET,IAAI,CAACS,KADc;AAE1BC,QAAAA,QAAQ,EAAEV,IAAI,CAACU,QAFW;AAG1BF,QAAAA,UAAU,EAAER,IAAI,CAACQ,UAAL,IAAmB,IAHL;AAI1BG,QAAAA,QAAQ,EAAEX,IAAI,CAACW,QAAL,IAAiB,IAJD;AAK1BC,QAAAA,EAAE,EAAEZ,IAAI,CAACN,GAAL,CAASS,QAAT;AALsB,OAAX,CAAV;AADF,KADF;AAULU,IAAAA,UAAU,EAAE;AAVP,GAAP;AAaD;AAGH,eAAehC,UAAf","sourcesContent":["import { Fragment, useState } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport AllTask from '../components/task/AllTask';\r\nimport {MongoClient} from 'mongodb'\r\n\r\nfunction MyCalendar(props){\r\n     const [chosenDate, setChosenDate] = useState(new Date());\r\n\r\n    return (\r\n        <Fragment>\r\n            <Calendar value={chosenDate} onChange={setChosenDate}/>\r\n            <AllTask tasks={props.tasks}/>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport async function getStaticPaths(){\r\n  \r\n  const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\r\n  const db = client.db();\r\n\r\n  const tasksCollection = db.collection('tasks');\r\n  const tasks = await tasksCollection.find({}, {_id: 1}).toArray();\r\n\r\n  client.close();\r\n\r\n  return{\r\n      fallback: 'blocking',\r\n      paths: tasks.map((task) => ({\r\n          params: {\r\n              taskId: task._id.toString()\r\n          },\r\n      }))\r\n  \r\n  };\r\n}\r\n\r\n//zamina na getServerSideProps\r\nexport async function getStaticProps(context) {\r\n    \r\n  const taskDate = context.chosenDate;\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n  \r\n    const taskCollection = db.collection('tasks');\r\n    const tasks = await taskCollection.find({start_date: taskDate}).toArray();\r\n  \r\n    client.close()\r\n  \r\n    return {\r\n      props: {\r\n        tasks: tasks.map((task) => ({\r\n          title: task.title,\r\n          priority: task.priority,\r\n          start_date: task.start_date || null,\r\n          complete: task.complete || null,\r\n          id: task._id.toString(),\r\n        })),\r\n      }, \r\n      revalidate: 1\r\n    }\r\n  \r\n  }\r\n\r\n\r\nexport default MyCalendar;"]},"metadata":{},"sourceType":"module"}