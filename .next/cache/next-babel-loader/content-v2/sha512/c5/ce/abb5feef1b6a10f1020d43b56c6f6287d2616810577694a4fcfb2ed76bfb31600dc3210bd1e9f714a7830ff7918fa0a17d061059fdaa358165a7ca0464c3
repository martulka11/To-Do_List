{"ast":null,"code":"import _regeneratorRuntime from \"D:/IT/moje_projekty/to-do_list/node_modules/@babel/runtime/regenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"D:/IT/moje_projekty/to-do_list/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"D:\\\\IT\\\\moje_projekty\\\\to-do_list\\\\pages\\\\[taskId]\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport TaskDetails from \"../../components/task/TaskDetails\";\nimport { useRouter } from \"next/router\";\nimport React, { Fragment } from \"react\";\n\nvar TaskDetail = function TaskDetail(props) {\n  _s();\n\n  var router = useRouter();\n\n  function updatedTaskHandler(_x) {\n    return _updatedTaskHandler.apply(this, arguments);\n  }\n\n  function _updatedTaskHandler() {\n    _updatedTaskHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(enteredTaskData) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"/api/helper\", {\n                method: \"PUT\",\n                body: JSON.stringify(enteredTaskData),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              router.push(\"/\");\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _updatedTaskHandler.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TaskDetails, {\n      title: props.taskData.title,\n      priority: props.taskData.priority,\n      start_date: props.taskData.start_date,\n      complete: props.taskData.complete,\n      description: props.taskData.description,\n      onUpdatedTask: updatedTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(TaskDetail, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = TaskDetail;\nexport var __N_SSG = true;\nexport default TaskDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDetail\");","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/pages/[taskId]/index.js"],"names":["TaskDetails","useRouter","React","Fragment","TaskDetail","props","router","updatedTaskHandler","enteredTaskData","fetch","method","body","JSON","stringify","headers","response","push","taskData","title","priority","start_date","complete","description"],"mappings":";;;;;;;;AAAA,OAAOA,WAAP,MAAwB,mCAAxB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAAA;;AAC5B,MAAMC,MAAM,GAAGL,SAAS,EAAxB;;AAD4B,WAGbM,kBAHa;AAAA;AAAA;;AAAA;AAAA,mFAG5B,iBAAkCC,eAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACyBC,KAAK,CAAC,aAAD,EAAgB;AAC1CC,gBAAAA,MAAM,EAAE,KADkC;AAE1CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,eAAf,CAFoC;AAG1CM,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT;AAHiC,eAAhB,CAD9B;;AAAA;AACQC,cAAAA,QADR;AASET,cAAAA,MAAM,CAACU,IAAP,CAAY,GAAZ;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAH4B;AAAA;AAAA;;AAe5B,sBACE,QAAC,QAAD;AAAA,2BACE,QAAC,WAAD;AACE,MAAA,KAAK,EAAEX,KAAK,CAACY,QAAN,CAAeC,KADxB;AAEE,MAAA,QAAQ,EAAEb,KAAK,CAACY,QAAN,CAAeE,QAF3B;AAGE,MAAA,UAAU,EAAEd,KAAK,CAACY,QAAN,CAAeG,UAH7B;AAIE,MAAA,QAAQ,EAAEf,KAAK,CAACY,QAAN,CAAeI,QAJ3B;AAKE,MAAA,WAAW,EAAEhB,KAAK,CAACY,QAAN,CAAeK,WAL9B;AAME,MAAA,aAAa,EAAEf;AANjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAYD,CA3BD;;GAAMH,U;UACWH,S;;;KADXG,U;;AAwFN,eAAeA,UAAf","sourcesContent":["import TaskDetails from \"../../components/task/TaskDetails\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { Fragment } from \"react\";\r\n\r\nconst TaskDetail = (props) => {\r\n  const router = useRouter();\r\n\r\n  async function updatedTaskHandler(enteredTaskData) {\r\n    const response = await fetch(\"/api/helper\", {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(enteredTaskData),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    router.push(\"/\");\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <TaskDetails\r\n        title={props.taskData.title}\r\n        priority={props.taskData.priority}\r\n        start_date={props.taskData.start_date}\r\n        complete={props.taskData.complete}\r\n        description={props.taskData.description}\r\n        onUpdatedTask={updatedTaskHandler}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n\r\n  const MONGODB = process.env.REACT_APP_MONGODB\r\n\r\n  let client;\r\n\r\n  try {\r\n    client = await MongoClient.connect(\r\n      MONGODB\r\n    );\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Could not connect to database\" });\r\n    return;\r\n  }\r\n\r\n  const db = client.db();\r\n\r\n  const tasksCollection = db.collection(\"tasks\");\r\n  const tasks = await tasksCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: \"blocking\",\r\n    paths: tasks.map((task) => ({\r\n      params: {\r\n        taskId: task._id.toString(),\r\n      },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const taskId = context.params.taskId;\r\n\r\n  const client = await MongoClient.connect(\r\n    MONGODB\r\n  );\r\n  const db = client.db();\r\n\r\n  const tasksCollection = db.collection(\"tasks\");\r\n  const selectedTask = await tasksCollection.findOne({ _id: ObjectId(taskId) });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      taskData: {\r\n        id: selectedTask._id.toString(),\r\n        title: selectedTask.title,\r\n        priority: selectedTask.priority,\r\n        start_date: selectedTask.start_date,\r\n        complete: selectedTask.complete,\r\n        description: selectedTask.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default TaskDetail;\r\n"]},"metadata":{},"sourceType":"module"}