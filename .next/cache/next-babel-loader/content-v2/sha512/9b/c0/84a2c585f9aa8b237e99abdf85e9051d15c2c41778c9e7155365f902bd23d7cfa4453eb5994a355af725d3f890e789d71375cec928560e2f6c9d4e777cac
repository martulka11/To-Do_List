{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\IT\\\\moje_projekty\\\\to-do_list\\\\pages\\\\complete-tasks.js\",\n    _this = this;\n\nimport { Fragment } from \"react\";\nimport AllTask from \"../components/task/AllTask\";\n\nvar CompleteTask = function CompleteTask(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [props.tasks.length > 0 && /*#__PURE__*/_jsxDEV(AllTask, {\n      tasks: props.tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 34\n    }, _this), props.tasks.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-found\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No found tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = CompleteTask;\nexport var __N_SSG = true;\nexport default CompleteTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompleteTask\");","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/pages/complete-tasks.js"],"names":["Fragment","AllTask","CompleteTask","props","tasks","length"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,OAAP,MAAoB,4BAApB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9B,sBACE,QAAC,QAAD;AAAA,eACGA,KAAK,CAACC,KAAN,CAAYC,MAAZ,GAAqB,CAArB,iBAA0B,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEF,KAAK,CAACC;AAAtB;AAAA;AAAA;AAAA;AAAA,aAD7B,EAEGD,KAAK,CAACC,KAAN,CAAYC,MAAZ,KAAuB,CAAvB,iBACC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAUD,CAXD;;KAAMH,Y;;AAgDN,eAAeA,YAAf","sourcesContent":["import { Fragment } from \"react\";\r\nimport { MongoClient } from \"mongodb\";\r\nimport AllTask from \"../components/task/AllTask\";\r\n\r\nconst CompleteTask = (props) => {\r\n  return (\r\n    <Fragment>\r\n      {props.tasks.length > 0 && <AllTask tasks={props.tasks} />}\r\n      {props.tasks.length === 0 && (\r\n        <div className=\"no-found\">\r\n          <h2>No found tasks</h2>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport async function getStaticProps() {\r\n\r\n  const MONGODB = process.env.REACT_APP_MONGODB\r\n\r\n  let client;\r\n\r\n  try {\r\n    client = await MongoClient.connect(\r\n      MONGODB\r\n    );\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Could not connect to database\" });\r\n    return;\r\n  }\r\n  const db = client.db();\r\n\r\n  const taskCollection = db.collection(\"tasks\");\r\n  const tasks = await taskCollection.find({ complete: true }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      tasks: tasks.map((task) => ({\r\n        title: task.title,\r\n        priority: task.priority,\r\n        start_date: task.start_date || null,\r\n        complete: task.complete || null,\r\n        id: task._id.toString(),\r\n      })),\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n\r\nexport default CompleteTask;\r\n"]},"metadata":{},"sourceType":"module"}