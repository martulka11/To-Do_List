{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\IT\\\\moje_projekty\\\\to-do_list\\\\pages\\\\index.js\";\nimport { Fragment } from \"react\";\nimport AllTask from \"../components/task/AllTask\";\nimport { MongoClient } from \"mongodb\";\nimport SingleTask from \"../components/task/SingleTask\";\n\nfunction Home(props) {\n  async function deleteTaskHandler(enteredTaskData) {\n    const response = await fetch(\"/api/helper\", {\n      method: \"DELETE\",\n      body: JSON.stringify(enteredTaskData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AllTask, {\n      tasks: props.tasks,\n      onDeleteTask: deleteTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SingleTask, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticProps() {\n  let client;\n\n  try {\n    client = await MongoClient.connect(\"mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority\");\n  } catch (error) {\n    res.status(500).json({\n      message: \"Could not connect to database\"\n    });\n    return;\n  }\n\n  const db = client.db();\n  const taskCollection = db.collection(\"tasks\");\n  const tasks = await taskCollection.find().toArray();\n  client.close();\n  return {\n    props: {\n      tasks: tasks.map(task => ({\n        title: task.title,\n        priority: task.priority,\n        start_date: task.start_date || null,\n        complete: task.complete || null,\n        id: task._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n}\nexport default Home;","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/pages/index.js"],"names":["Fragment","AllTask","MongoClient","SingleTask","Home","props","deleteTaskHandler","enteredTaskData","response","fetch","method","body","JSON","stringify","headers","data","json","console","log","tasks","getStaticProps","client","connect","error","res","status","message","db","taskCollection","collection","find","toArray","close","map","task","title","priority","start_date","complete","id","_id","toString","revalidate"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,UAAP,MAAuB,+BAAvB;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAEnB,iBAAeC,iBAAf,CAAiCC,eAAjC,EAAkD;AAChD,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,EAAgB;AAC1CC,MAAAA,MAAM,EAAE,QADkC;AAE1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,eAAf,CAFoC;AAG1CO,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHiC,KAAhB,CAA5B;AAQA,UAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAED;;AAED,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEV,KAAK,CAACc,KAAtB;AAA6B,MAAA,YAAY,EAAEb;AAA3C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;AAED,OAAO,eAAec,cAAf,GAAgC;AACrC,MAAIC,MAAJ;;AAEA,MAAI;AACFA,IAAAA,MAAM,GAAG,MAAMnB,WAAW,CAACoB,OAAZ,CACb,8FADa,CAAf;AAGD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACdC,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB;AAAEU,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA;AACD;;AACD,QAAMC,EAAE,GAAGN,MAAM,CAACM,EAAP,EAAX;AAEA,QAAMC,cAAc,GAAGD,EAAE,CAACE,UAAH,CAAc,OAAd,CAAvB;AACA,QAAMV,KAAK,GAAG,MAAMS,cAAc,CAACE,IAAf,GAAsBC,OAAtB,EAApB;AAEAV,EAAAA,MAAM,CAACW,KAAP;AAEA,SAAO;AACL3B,IAAAA,KAAK,EAAE;AACLc,MAAAA,KAAK,EAAEA,KAAK,CAACc,GAAN,CAAWC,IAAD,KAAW;AAC1BC,QAAAA,KAAK,EAAED,IAAI,CAACC,KADc;AAE1BC,QAAAA,QAAQ,EAAEF,IAAI,CAACE,QAFW;AAG1BC,QAAAA,UAAU,EAAEH,IAAI,CAACG,UAAL,IAAmB,IAHL;AAI1BC,QAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAAL,IAAiB,IAJD;AAK1BC,QAAAA,EAAE,EAAEL,IAAI,CAACM,GAAL,CAASC,QAAT;AALsB,OAAX,CAAV;AADF,KADF;AAULC,IAAAA,UAAU,EAAE;AAVP,GAAP;AAYD;AACD,eAAetC,IAAf","sourcesContent":["import { Fragment } from \"react\";\nimport AllTask from \"../components/task/AllTask\";\nimport { MongoClient } from \"mongodb\";\nimport SingleTask from \"../components/task/SingleTask\";\n\n\nfunction Home(props) {\n\n  async function deleteTaskHandler(enteredTaskData) {\n    const response = await fetch(\"/api/helper\", {\n      method: \"DELETE\",\n      body: JSON.stringify(enteredTaskData),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const data = await response.json();\n    console.log(data);\n\n  }\n\n  return (\n    <Fragment>\n      <AllTask tasks={props.tasks} onDeleteTask={deleteTaskHandler} />\n      <SingleTask/>\n    </Fragment>\n  );\n}\n\nexport async function getStaticProps() {\n  let client;\n\n  try {\n    client = await MongoClient.connect(\n      \"mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority\"\n    );\n  } catch (error) {\n    res.status(500).json({ message: \"Could not connect to database\" });\n    return;\n  }\n  const db = client.db();\n\n  const taskCollection = db.collection(\"tasks\");\n  const tasks = await taskCollection.find().toArray();\n\n  client.close();\n\n  return {\n    props: {\n      tasks: tasks.map((task) => ({\n        title: task.title,\n        priority: task.priority,\n        start_date: task.start_date || null,\n        complete: task.complete || null,\n        id: task._id.toString(),\n      })),\n    },\n    revalidate: 1,\n  };\n}\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}