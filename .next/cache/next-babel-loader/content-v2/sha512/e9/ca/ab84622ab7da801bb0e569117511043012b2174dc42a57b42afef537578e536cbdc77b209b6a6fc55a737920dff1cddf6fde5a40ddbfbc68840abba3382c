{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\IT\\\\moje_projekty\\\\to-do_list\\\\pages\\\\calendar.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport AllTask from '../components/task/AllTask';\n\nfunction MyCalendar(props) {\n  _s();\n\n  var _useState = useState(new Date()),\n      chosenDate = _useState[0],\n      setChosenDate = _useState[1];\n\n  var _useState2 = useState(null),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(false),\n      isLoading = _useState3[0],\n      setLoading = _useState3[1];\n\n  useEffect(function () {\n    setLoading(true);\n    fetch('api').then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      setData(data);\n      setLoading(false);\n    });\n  }, []);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 28\n  }, this);\n  if (!data) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No profile data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      value: chosenDate,\n      onChange: setChosenDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AllTask, {\n      tasks: props.tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n} //zamina na getServerSideProps\n\n\n_s(MyCalendar, \"N3mOMDlbptJrwz9PG9Bf9OoVJrk=\");\n\n_c = MyCalendar;\nexport var __N_SSG = true;\nexport default MyCalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyCalendar\");","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/pages/calendar.js"],"names":["Fragment","useState","useEffect","Calendar","AllTask","MyCalendar","props","Date","chosenDate","setChosenDate","data","setData","isLoading","setLoading","fetch","then","res","json","tasks"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,kCAAP;AACA,OAAOC,OAAP,MAAoB,4BAApB;;AAIA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AAAA;;AAAA,kBACeL,QAAQ,CAAC,IAAIM,IAAJ,EAAD,CADvB;AAAA,MACdC,UADc;AAAA,MACFC,aADE;;AAAA,mBAGGR,QAAQ,CAAC,IAAD,CAHX;AAAA,MAGdS,IAHc;AAAA,MAGRC,OAHQ;;AAAA,mBAIWV,QAAQ,CAAC,KAAD,CAJnB;AAAA,MAIdW,SAJc;AAAA,MAIHC,UAJG;;AAMrBX,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,IAAAA,KAAK,CAAC,KAAD,CAAL,CACGC,IADH,CACQ,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KADR,EAEGF,IAFH,CAEQ,UAACL,IAAD,EAAU;AACdC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KALH;AAMD,GARQ,EAQN,EARM,CAAT;AAUA,MAAID,SAAJ,EAAe,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACf,MAAI,CAACF,IAAL,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAGZ,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEF,UAAjB;AAA6B,MAAA,QAAQ,EAAEC;AAAvC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEH,KAAK,CAACY;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,C,CAED;;;GA7BSb,U;;KAAAA,U;;AAyDT,eAAeA,UAAf","sourcesContent":["import { Fragment, useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport AllTask from '../components/task/AllTask';\r\nimport {MongoClient} from 'mongodb'\r\n\r\n\r\nfunction MyCalendar(props){\r\n     const [chosenDate, setChosenDate] = useState(new Date());\r\n\r\n     const [data, setData] = useState(null)\r\n     const [isLoading, setLoading] = useState(false)\r\n   \r\n     useEffect(() => {\r\n       setLoading(true)\r\n       fetch('api')\r\n         .then((res) => res.json())\r\n         .then((data) => {\r\n           setData(data)\r\n           setLoading(false)\r\n         })\r\n     }, [])\r\n   \r\n     if (isLoading) return <p>Loading...</p>\r\n     if (!data) return <p>No profile data</p>\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Calendar value={chosenDate} onChange={setChosenDate}/>\r\n            <AllTask tasks={props.tasks}/>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n\r\n//zamina na getServerSideProps\r\nexport async function getStaticProps() {\r\n    \r\n\r\n    const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n  \r\n    const taskCollection = db.collection('tasks');\r\n    const tasks = await taskCollection.find({start_date: new Date()}).toArray();\r\n  \r\n    client.close()\r\n  \r\n    return {\r\n      props: {\r\n        tasks: tasks.map((task) => ({\r\n          title: task.title,\r\n          priority: task.priority,\r\n          start_date: task.start_date || null,\r\n          complete: task.complete || null,\r\n          id: task._id.toString(),\r\n        })),\r\n      }, \r\n      revalidate: 1\r\n    }\r\n  \r\n  }\r\n\r\n\r\nexport default MyCalendar;"]},"metadata":{},"sourceType":"module"}