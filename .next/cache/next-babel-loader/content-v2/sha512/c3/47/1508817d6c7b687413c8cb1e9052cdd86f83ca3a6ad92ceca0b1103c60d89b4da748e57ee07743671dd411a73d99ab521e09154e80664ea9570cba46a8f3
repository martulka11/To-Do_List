{"ast":null,"code":"import _regeneratorRuntime from \"D:/IT/moje_projekty/to-do_list/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/IT/moje_projekty/to-do_list/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\IT\\\\moje_projekty\\\\to-do_list\\\\pages\\\\calendar.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport AllTask from '../components/task/AllTask';\nimport { MongoClient } from 'mongodb';\n\nfunction MyCalendar(props) {\n  _s();\n\n  var _useState = useState(new Date()),\n      chosenDate = _useState[0],\n      setChosenDate = _useState[1];\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      value: chosenDate,\n      onChange: setChosenDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AllTask, {\n      tasks: props.tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n} //zamina na getServerSideProps\n\n\n_s(MyCalendar, \"QFhBaf8bhwHvwH1GwhAlzMii7As=\");\n\n_c = MyCalendar;\nexport function getServerProps() {\n  return _getServerProps.apply(this, arguments);\n}\n\nfunction _getServerProps() {\n  _getServerProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var client, db, taskCollection, tasks;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\n\n          case 2:\n            client = _context.sent;\n            db = client.db();\n            taskCollection = db.collection('tasks');\n            _context.next = 7;\n            return taskCollection.find({\n              start_date: new Date()\n            }).toArray();\n\n          case 7:\n            tasks = _context.sent;\n            client.close();\n            return _context.abrupt(\"return\", {\n              props: {\n                tasks: tasks.map(function (task) {\n                  return {\n                    title: task.title,\n                    priority: task.priority,\n                    start_date: task.start_date || null,\n                    complete: task.complete || null,\n                    id: task._id.toString()\n                  };\n                })\n              },\n              revalidate: 1\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getServerProps.apply(this, arguments);\n}\n\nexport default MyCalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyCalendar\");","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/pages/calendar.js"],"names":["Fragment","useState","useEffect","Calendar","AllTask","MongoClient","MyCalendar","props","Date","chosenDate","setChosenDate","tasks","getServerProps","connect","client","db","taskCollection","collection","find","start_date","toArray","close","map","task","title","priority","complete","id","_id","toString","revalidate"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,kCAAP;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAAQC,WAAR,QAA0B,SAA1B;;AAGA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AAAA;;AAAA,kBACeN,QAAQ,CAAC,IAAIO,IAAJ,EAAD,CADvB;AAAA,MACdC,UADc;AAAA,MACFC,aADE;;AAGtB,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAED,UAAjB;AAA6B,MAAA,QAAQ,EAAEC;AAAvC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEH,KAAK,CAACI;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,C,CAED;;;GAZSL,U;;KAAAA,U;AAaT,gBAAsBM,cAAtB;AAAA;AAAA;;;6EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGkBP,WAAW,CAACQ,OAAZ,CAAoB,8FAApB,CAHlB;;AAAA;AAGGC,YAAAA,MAHH;AAIGC,YAAAA,EAJH,GAIQD,MAAM,CAACC,EAAP,EAJR;AAMGC,YAAAA,cANH,GAMoBD,EAAE,CAACE,UAAH,CAAc,OAAd,CANpB;AAAA;AAAA,mBAOiBD,cAAc,CAACE,IAAf,CAAoB;AAACC,cAAAA,UAAU,EAAE,IAAIX,IAAJ;AAAb,aAApB,EAA8CY,OAA9C,EAPjB;;AAAA;AAOGT,YAAAA,KAPH;AASHG,YAAAA,MAAM,CAACO,KAAP;AATG,6CAWI;AACLd,cAAAA,KAAK,EAAE;AACLI,gBAAAA,KAAK,EAAEA,KAAK,CAACW,GAAN,CAAU,UAACC,IAAD;AAAA,yBAAW;AAC1BC,oBAAAA,KAAK,EAAED,IAAI,CAACC,KADc;AAE1BC,oBAAAA,QAAQ,EAAEF,IAAI,CAACE,QAFW;AAG1BN,oBAAAA,UAAU,EAAEI,IAAI,CAACJ,UAAL,IAAmB,IAHL;AAI1BO,oBAAAA,QAAQ,EAAEH,IAAI,CAACG,QAAL,IAAiB,IAJD;AAK1BC,oBAAAA,EAAE,EAAEJ,IAAI,CAACK,GAAL,CAASC,QAAT;AALsB,mBAAX;AAAA,iBAAV;AADF,eADF;AAULC,cAAAA,UAAU,EAAE;AAVP,aAXJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA2BP,eAAexB,UAAf","sourcesContent":["import { Fragment, useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport AllTask from '../components/task/AllTask';\r\nimport {MongoClient} from 'mongodb'\r\n\r\n\r\nfunction MyCalendar(props){\r\n     const [chosenDate, setChosenDate] = useState(new Date());\r\n\r\n    return (\r\n        <Fragment>\r\n            <Calendar value={chosenDate} onChange={setChosenDate}/>\r\n            <AllTask tasks={props.tasks}/>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n\r\n//zamina na getServerSideProps\r\nexport async function getServerProps() {\r\n    \r\n\r\n    const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n  \r\n    const taskCollection = db.collection('tasks');\r\n    const tasks = await taskCollection.find({start_date: new Date()}).toArray();\r\n  \r\n    client.close()\r\n  \r\n    return {\r\n      props: {\r\n        tasks: tasks.map((task) => ({\r\n          title: task.title,\r\n          priority: task.priority,\r\n          start_date: task.start_date || null,\r\n          complete: task.complete || null,\r\n          id: task._id.toString(),\r\n        })),\r\n      }, \r\n      revalidate: 1\r\n    }\r\n  \r\n  }\r\n\r\n\r\nexport default MyCalendar;"]},"metadata":{},"sourceType":"module"}