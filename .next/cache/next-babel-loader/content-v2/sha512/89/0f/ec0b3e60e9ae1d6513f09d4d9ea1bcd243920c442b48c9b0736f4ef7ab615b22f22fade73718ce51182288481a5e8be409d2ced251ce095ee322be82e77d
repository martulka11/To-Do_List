{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\IT\\\\moje_projekty\\\\to-do_list\\\\pages\\\\calendar.js\";\nimport { Fragment, useState } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport AllTask from '../components/task/AllTask';\nimport { MongoClient } from 'da';\n\nfunction MyCalendar() {\n  const {\n    0: chosenDate,\n    1: setchosenDate\n  } = useState(new Date());\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      value: chosenDate,\n      onChange: setchosenDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AllTask, {\n      tasks: props.tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticProps() {\n  const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\n  const db = client.db();\n  const taskCollection = db.collection('tasks');\n  const tasks = await taskCollection.find({\n    start_date: chosenDate\n  }).toArray();\n  client.close();\n  return {\n    props: {\n      tasks: tasks.map(task => ({\n        title: task.title,\n        priority: task.priority,\n        start_date: task.start_date || null,\n        complete: task.complete || null,\n        id: task._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n}\nexport default MyCalendar;","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/pages/calendar.js"],"names":["Fragment","useState","Calendar","AllTask","MongoClient","MyCalendar","chosenDate","setchosenDate","Date","props","tasks","getStaticProps","client","connect","db","taskCollection","collection","find","start_date","toArray","close","map","task","title","priority","complete","id","_id","toString","revalidate"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,OAAnC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,kCAAP;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAAQC,WAAR,QAA0B,IAA1B;;AAEA,SAASC,UAAT,GAAqB;AAEb,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BN,QAAQ,CAAC,IAAIO,IAAJ,EAAD,CAA5C;AAEJ,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEF,UAAjB;AAA6B,MAAA,QAAQ,EAAEC;AAAvC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEE,KAAK,CAACC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;AAGD,OAAO,eAAeC,cAAf,GAAgC;AAEnC,QAAMC,MAAM,GAAG,MAAMR,WAAW,CAACS,OAAZ,CAAoB,8FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,cAAc,GAAGD,EAAE,CAACE,UAAH,CAAc,OAAd,CAAvB;AACA,QAAMN,KAAK,GAAG,MAAMK,cAAc,CAACE,IAAf,CAAoB;AAACC,IAAAA,UAAU,EAAEZ;AAAb,GAApB,EAA8Ca,OAA9C,EAApB;AAEAP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLX,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAEA,KAAK,CAACW,GAAN,CAAWC,IAAD,KAAW;AAC1BC,QAAAA,KAAK,EAAED,IAAI,CAACC,KADc;AAE1BC,QAAAA,QAAQ,EAAEF,IAAI,CAACE,QAFW;AAG1BN,QAAAA,UAAU,EAAEI,IAAI,CAACJ,UAAL,IAAmB,IAHL;AAI1BO,QAAAA,QAAQ,EAAEH,IAAI,CAACG,QAAL,IAAiB,IAJD;AAK1BC,QAAAA,EAAE,EAAEJ,IAAI,CAACK,GAAL,CAASC,QAAT;AALsB,OAAX,CAAV;AADF,KADF;AAULC,IAAAA,UAAU,EAAE;AAVP,GAAP;AAaD;AAGH,eAAexB,UAAf","sourcesContent":["import { Fragment, useState } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport AllTask from '../components/task/AllTask';\r\nimport {MongoClient} from 'da'\r\n\r\nfunction MyCalendar(){\r\n\r\n        const [chosenDate, setchosenDate] = useState(new Date());\r\n\r\n    return (\r\n        <Fragment>\r\n            <Calendar value={chosenDate} onChange={setchosenDate}/>\r\n            <AllTask tasks={props.tasks}/>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport async function getStaticProps() {\r\n    \r\n    const client = await MongoClient.connect('mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority');\r\n    const db = client.db();\r\n  \r\n    const taskCollection = db.collection('tasks');\r\n    const tasks = await taskCollection.find({start_date: chosenDate}).toArray();\r\n  \r\n    client.close()\r\n  \r\n    return {\r\n      props: {\r\n        tasks: tasks.map((task) => ({\r\n          title: task.title,\r\n          priority: task.priority,\r\n          start_date: task.start_date || null,\r\n          complete: task.complete || null,\r\n          id: task._id.toString(),\r\n        })),\r\n      }, \r\n      revalidate: 1\r\n    }\r\n  \r\n  }\r\n\r\n\r\nexport default MyCalendar;"]},"metadata":{},"sourceType":"module"}