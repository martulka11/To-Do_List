{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\IT\\\\moje_projekty\\\\to-do_list\\\\pages\\\\complete-tasks.js\";\nimport { Fragment } from \"react\";\nimport { MongoClient } from \"mongodb\";\nimport AllTask from \"../components/task/AllTask\";\n\nconst CompleteTask = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AllTask, {\n      tasks: props.tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), props.tasks.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-found\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No found tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticProps() {\n  let client;\n\n  try {\n    client = await MongoClient.connect(\"mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority\");\n  } catch (error) {\n    res.status(500).json({\n      message: \"Could not connect to database\"\n    });\n    return;\n  }\n\n  const db = client.db();\n  const taskCollection = db.collection(\"tasks\");\n  const tasks = await taskCollection.find({\n    complete: true\n  }).toArray();\n  client.close();\n  return {\n    props: {\n      tasks: tasks.map(task => ({\n        title: task.title,\n        priority: task.priority,\n        start_date: task.start_date || null,\n        complete: task.complete || null,\n        id: task._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n}\nexport default CompleteTask;","map":{"version":3,"sources":["D:/IT/moje_projekty/to-do_list/pages/complete-tasks.js"],"names":["Fragment","MongoClient","AllTask","CompleteTask","props","tasks","length","getStaticProps","client","connect","error","res","status","json","message","db","taskCollection","collection","find","complete","toArray","close","map","task","title","priority","start_date","id","_id","toString","revalidate"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,OAAP,MAAoB,4BAApB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEA,KAAK,CAACC;AAAtB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGD,KAAK,CAACC,KAAN,CAAYC,MAAZ,KAAuB,CAAvB,iBACD;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAVD;;AAYA,OAAO,eAAeC,cAAf,GAAgC;AACrC,MAAIC,MAAJ;;AAEA,MAAI;AACFA,IAAAA,MAAM,GAAG,MAAMP,WAAW,CAACQ,OAAZ,CACb,8FADa,CAAf;AAGD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACdC,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA;AACD;;AACD,QAAMC,EAAE,GAAGP,MAAM,CAACO,EAAP,EAAX;AAEA,QAAMC,cAAc,GAAGD,EAAE,CAACE,UAAH,CAAc,OAAd,CAAvB;AACA,QAAMZ,KAAK,GAAG,MAAMW,cAAc,CAACE,IAAf,CAAoB;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAApB,EAAwCC,OAAxC,EAApB;AAEAZ,EAAAA,MAAM,CAACa,KAAP;AAEA,SAAO;AACLjB,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAEA,KAAK,CAACiB,GAAN,CAAWC,IAAD,KAAW;AAC1BC,QAAAA,KAAK,EAAED,IAAI,CAACC,KADc;AAE1BC,QAAAA,QAAQ,EAAEF,IAAI,CAACE,QAFW;AAG1BC,QAAAA,UAAU,EAAEH,IAAI,CAACG,UAAL,IAAmB,IAHL;AAI1BP,QAAAA,QAAQ,EAAEI,IAAI,CAACJ,QAAL,IAAiB,IAJD;AAK1BQ,QAAAA,EAAE,EAAEJ,IAAI,CAACK,GAAL,CAASC,QAAT;AALsB,OAAX,CAAV;AADF,KADF;AAULC,IAAAA,UAAU,EAAE;AAVP,GAAP;AAYD;AAED,eAAe3B,YAAf","sourcesContent":["import { Fragment } from \"react\";\r\nimport { MongoClient } from \"mongodb\";\r\nimport AllTask from \"../components/task/AllTask\";\r\n\r\nconst CompleteTask = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <AllTask tasks={props.tasks} />\r\n      {props.tasks.length === 0 && \r\n      <div className=\"no-found\">\r\n        <h2>No found tasks</h2>\r\n      </div>}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport async function getStaticProps() {\r\n  let client;\r\n\r\n  try {\r\n    client = await MongoClient.connect(\r\n      \"mongodb+srv://motylek:marta1999@cluster0.3tna7.mongodb.net/tasks?retryWrites=true&w=majority\"\r\n    );\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Could not connect to database\" });\r\n    return;\r\n  }\r\n  const db = client.db();\r\n\r\n  const taskCollection = db.collection(\"tasks\");\r\n  const tasks = await taskCollection.find({ complete: true }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      tasks: tasks.map((task) => ({\r\n        title: task.title,\r\n        priority: task.priority,\r\n        start_date: task.start_date || null,\r\n        complete: task.complete || null,\r\n        id: task._id.toString(),\r\n      })),\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n\r\nexport default CompleteTask;\r\n"]},"metadata":{},"sourceType":"module"}